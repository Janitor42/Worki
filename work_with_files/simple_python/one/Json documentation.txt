json.load()
Описание: Этот метод используется для десериализации JSON-данных,
 считываемых из файла, в объект Python (например, словарь или список).
Использование:
python
Копировать код

import json
with open('data.json', 'r') as file:
    data = json.load(file)
В этом примере содержимое файла data.json будет преобразовано в Python объект.


2. json.loads()
Описание: Этот метод используется для десериализации строки JSON в Python объект.
Использование:
python
Копировать код
import json
json_string = '{"name": "Alice", "age": 25}'
data = json.loads(json_string)
Преобразует строку json_string в Python объект (в данном случае — словарь).


3. json.dump()
Описание: Этот метод используется для сериализации объекта Python (например, словаря или списка)
в формат JSON и записи его в файл.
Использование:
python
Копировать код
import json
data = {"name": "Bob", "age": 30}
with open('output.json', 'w') as file:
    json.dump(data, file)
Этот код запишет объект data в файл output.json в формате JSON.



4. json.dumps()
Описание: Этот метод используется для сериализации Python объекта в строку JSON.
Использование:
python
Копировать код
import json
data = {"name": "Tom", "age": 22}
json_string = json.dumps(data)
print(json_string)
Этот код преобразует объект data в строку JSON: {"name": "Tom", "age": 22}.




#сложные методы


5. json.JSONDecodeError
Описание: Это исключение возникает, если JSON-строка не может быть правильно разобрана (например, если синтаксис неверен).
Использование:
python
Копировать код
import json
try:
    data = json.loads('{"name": "Alice", "age": 25')
except json.JSONDecodeError as e:
    print(f"Ошибка при декодировании JSON: {e}")
Это исключение помогает обработать ошибки при работе с некорректными JSON-данными.


6. json.JSONEncoder
Описание: Это класс, который можно использовать для настройки кастомной сериализации объектов Python в JSON. Иногда полезно, если вы хотите кастомизировать, как конкретные объекты (например, классы) сериализуются.
Использование:
python
Копировать код
import json

class CustomObject:
    def __init__(self, name, value):
        self.name = name
        self.value = value

def custom_encoder(obj):
    if isinstance(obj, CustomObject):
        return {"name": obj.name, "value": obj.value}
    raise TypeError(f"Тип {type(obj)} не может быть сериализован")

custom_obj = CustomObject("example", 42)
json_string = json.dumps(custom_obj, default=custom_encoder)
print(json_string)
Этот код использует кастомную функцию для сериализации объектов класса CustomObject.


7. json.JSONDecoder
Описание: Этот класс используется для настройки кастомного десериализатора JSON. Обычно его используют, если необходимо изменять процесс преобразования JSON-строки в Python объект.
Использование: Этот метод используется реже, и обычно достаточно использовать стандартные функции json.loads() или json.load().
 Однако если нужно изменить поведение десериализации, можно создать кастомный декодер.


8. json.tool
Описание: Это утилита, которая предоставляет команду в командной строке для форматирования и красивого вывода JSON. Это полезно для работы с JSON в терминале.
Использование (через командную строку):
bash
Копировать код
python -m json.tool input.json
Этот вызов отформатирует содержимое файла input.json в более читаемый вид.
Пример использования всех методов:
python
Копировать код
import json

# Пример с json.loads() и json.dumps()
json_string = '{"name": "John", "age": 30}'
data = json.loads(json_string)  # Преобразование строки JSON в объект Python
print(data)  # Выводит: {'name': 'John', 'age': 30}

new_json_string = json.dumps(data, indent=4)  # Преобразование объекта Python обратно в строку JSON
print(new_json_string)

# Пример с json.load() и json.dump()
with open('data.json', 'r') as file:
    file_data = json.load(file)  # Считывание JSON из файла в объект Python
    print(file_data)

with open('output.json', 'w') as file:
    json.dump(data, file, indent=4)  # Запись Python объекта в файл в формате JSON
Другие полезные параметры для json.dumps():
indent — Используется для отступов, чтобы сделать вывод более читаемым (форматированный JSON).

python
Копировать код
json_string = json.dumps(data, indent=4)
sort_keys — Сортирует ключи в JSON-объекте.

python
Копировать код
json_string = json.dumps(data, sort_keys=True)
ensure_ascii — Если False, позволяет включать не-ASCII символы (например, кириллицу) в JSON-строке.

python
Копировать код
json_string = json.dumps(data, ensure_ascii=False)