
"""
#общая информация:
Работа с текстовыми файлами типа cvs,txt,html
для начала обычный файл с блокнота

Открытие файла с помощью метода open()
Чтение файла с помощью метода read() или запись в файл посредством метода write()
Закрытие файла методом close()

# Чтобы начать работу с файлом, его надо открыть с помощью функции open(),
# которая имеет следующее формальное определение:
# open(file, mode)

# Первый параметр функции представляет путь к файлу. Путь файла может быть абсолютным,
# то есть начинаться с буквы диска, например, C://somedir/somefile.txt.
# Либо можно быть относительным, например, somedir/somefile.txt -
# в этом случае поиск файла будет идти относительно расположения запущенного скрипта Python.
#
# Второй передаваемый аргумент -
# mode устанавливает режим открытия файла в зависимости от того, что мы собираемся с ним делать.
# Существует 4 общих режима:

        # r (Read). Файл открывается для чтения. Если файл не найден,
        # то генерируется исключение FileNotFoundError
                # r+. Файл открывается одновременно для чтения и записи.
                # Если файл не найден, то генерируется исключение FileNotFoundError

        # w (Write). Файл открывается для записи. Если файл отсутствует, то он создается.
        # Если подобный файл уже есть, то он создается заново, и соответственно старые данные в нем стираются.
                # w+. Файл открывается одновременно для чтения и записи. Если файл не существует, то он автоматически создается.
                # Если файл существует, то он перезаписывается

        # a (Append). Файл открывается для дозаписи. Если файл отсутствует, то он создается.
        # Если подобный файл уже есть, то данные записываются в его конец.
                # a+. Файл открывается одновременно для чтения и записи. Если файл не существует, то он автоматически создается.
                # Если файл существует, то данные добавляются в конец файла


        # b (Binary). Используется для работы с бинарными файлами.
        # Применяется вместе с другими режимами - w или r, например, rb (чтение бинарных файлов) и wb (запись бинарных файлов).







                                        #Метод Open"""
#идем через абсолютный путь (вариант 1)(незабуть про r)
# file = open(r"C:\Users\i'm\PycharmProjects\Worki\work_with_files\simple_python\one\files\file_1.txt")
# print(file.read())


#идем через импорт (вариант 2)
import files
file = open('files/file_1.txt','r')
print(file.read())
#изначально нормально читает символы и латиницу, для кирилицы необходимо кодировка ecording='utf-8'


file =open('files/file_1.txt','r',encoding='utf-8')
print(file.read())


#read(count) - фун-ция принимает параметр - число (сколько символов мы хотим читать) считает как список

file=open('files/file_1.txt','r',encoding='utf-8')#нужно опять открывать файл т.к. предыдущий мы полностью прочли(или установить seek на 0)
print(file.read(4))
print(file.read(4))#но так же нужно помнить что для следующей фун-ции read он начнет не с начала а где остановился
file.seek(21)#фун-ция seek в параметре говорит в какое место (индекс) в тексте встать
print(file.read(10))#пример после seek - read идет с 10 индекса текста



file=open('files/file_1.txt','r',encoding='utf-8')
print('____________read_line________________')
print(file.readline())#печать 1 строки
print('____________read_line after read_line________________')
print(file.readline())# печать 1 строки после печати 1 строки (файл знает где мы остановились и идет с этого места)


print('_____________for_______________________')
file=open('files/file_1.txt','r',encoding='utf-8')

for row in file:# идет по файлу по строкам автоматически (файл - итерируемый обьект)
    print(row)


# print('___________double for_________________')#идем по строками а потом по рядам ( все как и в обычном)
# file=open('files/file_1.txt','r',encoding='utf-8')
# for row in file:
#     for letter in row:
#         print(letter)


file.close() #обязательный метод закрытия файла. Иначе будет утечка памяти

